{"version":3,"sources":["serviceWorker.js","actions/index.js","pages/todo/Todo.js","pages/todo/TodoList.js","pages/todo/index.js","pages/Dash/index.js","reducers/reduce/todo.js","reducers/index.js","index.js","routers/index.js"],"names":["Boolean","window","location","hostname","match","nextTodoId","Todo","_ref","onClick","completed","text","react_default","a","createElement","style","textDecoration","TodoList","todos","map","todo","todo_Todo","Object","assign","key","id","getVisibleTodos","filter","t","connect","state","visibilityFilter","AddTodo","input","dispatch","onSubmit","e","preventDefault","value","trim","type","es_button","ref","node","todo_TodoList","Dash","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","isRunning","ws","maxClient","space","buttonLoading","connectedNum","getConf","listenWs","getInfo","$fn","httpPost","url","data","setState","setTimeout","_this2","_this3","WebSocket","host","onopen","console","log","onmessage","event","JSON","parse","objectSpread2","onclose","evt","json","target","obj","num","clientList","length","toFixed","_this4","siteElements","forEach","item","push","mac","ipList","join","reqElements","resElements","clientStatis","req","typename","className","res","row","gutter","align","col","span","es_input","addonBefore","onChange","handleChangeInput","disabled","placeholder","loading","shutdown","danger","block","launch","divider","Number","justify","statistic","title","progress","strokeColor","0%","100%","trailColor","percent","getPercent","width","Component","arguments","undefined","action","concat","toConsumableArray","reducers","combineReducers","store","createStore","ReactDOM","render","es","Store","react_router_dom","react_router","exact","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d1f7d04e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","let nextTodoId = 0\nexport const addTodo = text => {\n  return {\n    type: 'ADD_TODO',\n    id: nextTodoId++,\n    text\n  }\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Todo = ({ onClick, completed, text }) => (\n  <li\n    onClick={onClick}\n    style={ {\n      textDecoration: completed ? 'line-through' : 'none'\n    }}\n  >\n    {text}\n  </li>\n)\n\nTodo.propTypes = {\n  completed: PropTypes.bool.isRequired,\n  text: PropTypes.string.isRequired\n}\n\nexport default Todo","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Todo from './Todo'\nimport { connect } from 'react-redux'\n\nlet TodoList = ({ todos }) => (\n    <ul>\n        {todos.map(todo => (\n            <Todo key={todo.id} {...todo} />\n        ))}\n    </ul>\n)\n\nTodoList.propTypes = {\n    todos: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.number.isRequired,\n            completed: PropTypes.bool.isRequired,\n            text: PropTypes.string.isRequired\n        }).isRequired\n    ).isRequired\n}\n\nconst getVisibleTodos = (todos, filter) => {\n    switch (filter) {\n        case 'SHOW_COMPLETED':\n            return todos.filter(t => t.completed)\n        case 'SHOW_ACTIVE':\n            return todos.filter(t => !t.completed)\n        case 'SHOW_ALL':\n        default:\n            return todos\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        todos: getVisibleTodos(state.todos, state.visibilityFilter)\n    }\n}\nTodoList = connect(\n    mapStateToProps\n)(TodoList)\n\nexport default TodoList","import React from 'react'\nimport { connect } from 'react-redux'\nimport { addTodo } from '../../actions'\nimport TodoList from './TodoList'\n\nimport { Button } from 'antd';\n// 由于 antd 组件的默认文案是英文，所以需要修改为中文\n// eslint-disable-next-line\nimport zhCN from 'antd/lib/locale-provider/zh_CN';\nimport \"antd/dist/antd.css\";\nlet AddTodo = ({ dispatch }) => {\n  let input\n\n  return (\n    <div>\n      <form\n        onSubmit={e => {\n          e.preventDefault()\n          if (!input.value.trim()) {\n            return\n          }\n          dispatch(addTodo(input.value))\n          input.value = ''\n        }}\n      >\n        <Button type=\"primary\">Example button</Button>\n        <input\n          ref={node => {\n            input = node\n          }}\n        />\n        <button type=\"submit\">\n          Add Todo\n        </button>\n      </form>\n      <TodoList></TodoList>\n    </div>\n  )\n}\nAddTodo = connect()(AddTodo)\n\nexport default AddTodo","import React, { Component } from \"react\";\nimport {\n    Button,\n    Input,\n    Row,\n    Col,\n    Divider,\n    Statistic,\n    Progress\n} from \"antd\";\nimport \"../../assets/css/Dash.css\";\nimport $fn from \"jj-browser-fn\";\n\nexport default class Dash extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isRunning: false,\n            ws: \"\",\n            maxClient: 0,\n            space: 0,\n            buttonLoading: false,\n            connectedNum: 0,\n        };\n        this.getConf();\n        this.listenWs();\n        this.getInfo();\n    }\n    async getInfo() {\n        const data = await $fn.httpPost({\n            url: \"/api/getInfo\"\n        });\n        // console.log(data);\n        this.setState(() => data);\n        setTimeout(() => {\n            this.getInfo();\n        }, 600);\n    }\n    listenWs() {\n        const ws = new WebSocket(\"ws://\" + window.location.host + \"/ws\");\n        // const ws = new WebSocket(\"ws://192.168.103.242:9089/ws\")\n        ws.onopen = () => {\n            console.log(\"Test_ws connection success.\");\n        };\n        ws.onmessage = event => {\n            const data = JSON.parse(event.data);\n            switch (data.type) {\n                case \"updateConf\":\n                    this.setState(() => ({\n                        ...data.data,\n                        buttonLoading: false\n                    }));\n                    break;\n                case \"updateSwitchFire\":\n                    this.setState(() => ({\n                        ...data.data\n                    }));\n                    break;\n                default:\n                    break;\n            }\n        };\n        ws.onclose = function(evt) {\n            console.log(\"Test_ws connection closed.\");\n        };\n    }\n    async getConf() {\n        const data = await $fn.httpPost({\n            url: \"/api/getConf\"\n        });\n        this.setState({\n            ws: data.ws,\n            maxClient: data.maxClient,\n            space: data.space,\n            isRunning: data.isRunning,\n        });\n    }\n    async launch() {\n        this.setState({\n            buttonLoading: true\n        });\n        await $fn.httpPost({\n            url: \"/api/runTest\",\n            json: {\n                // ws: this.state.ws,\n                // maxClient: this.state.maxClient,\n                // space: this.state.space,\n                // switchFire: this.state.switchFire\n            }\n        });\n        // this.setState({\n        //     isRunning: true\n        // });\n    }\n    async shutdown() {\n        this.setState({\n            buttonLoading: true\n        });\n        await $fn.httpPost({\n            url: \"/api/stopTest\"\n        });\n    }\n    handleChangeInput(event, type) {\n        if (event && event.target && event.target.value) {\n            let value = event.target.value;\n            const obj = {};\n            obj[type] = value;\n            this.setState(() => obj);\n        }\n    }\n    getPercent(num) {\n        return (\n            (num * 100) /\n            (this.state.maxClient *\n                (this.state.clientList ? this.state.clientList.length : 1))\n        ).toFixed(2);\n    }\n    render() {\n        const siteElements = [];\n        if (this.state.clientList) {\n            this.state.clientList.forEach(item => {\n                siteElements.push(\n                    <div key={item.mac}>\n                        <p>\n                            mac：{item.mac} - ip：{item.ipList.join(\",\")}\n                        </p>\n                        <hr />\n                    </div>\n                );\n            });\n        }\n\n        const reqElements = [];\n        const resElements = [];\n        if (this.state.clientStatis) {\n            if (this.state.clientStatis.req) {\n                for (let typename in this.state.clientStatis.req) {\n                    reqElements.push(\n                        <div>\n                            <span className=\"type-name\">{typename}</span> :{\" \"}\n                            {this.state.clientStatis.req[typename]}\n                        </div>\n                    );\n                }\n            }\n            if (this.state.clientStatis.req) {\n                for (let typename in this.state.clientStatis.res) {\n                    resElements.push(\n                        <div>\n                            <span className=\"type-name\">{typename}</span> :{\" \"}\n                            {this.state.clientStatis.res[typename]}\n                        </div>\n                    );\n                }\n            }\n        }\n\n        return (\n            <div className=\"dash-page\">\n                <h2>websocket连接数测试</h2>\n                <Row gutter={16} align=\"middle\">\n                    <Col className=\"gutter-row\" span={9}>\n                        <Input\n                            addonBefore=\"连接地址\"\n                            value={this.state.ws}\n                            onChange={event =>\n                                this.handleChangeInput(event, \"ws\")\n                            }\n                            disabled={true}\n                        />\n                    </Col>\n                    <Col className=\"gutter-row\" span={5}>\n                        <Input\n                            addonBefore=\"单机连接数量\"\n                            value={this.state.maxClient}\n                            placeholder=\"500\"\n                            disabled={true}\n                            onChange={event =>\n                                this.handleChangeInput(event, \"maxClient\")\n                            }\n                        />\n                    </Col>\n                    <Col className=\"gutter-row\" span={6}>\n                        <Input\n                            addonBefore=\"间隔时间(ms)\"\n                            value={this.state.space}\n                            placeholder=\"0\"\n                            disabled={true}\n                            onChange={event =>\n                                this.handleChangeInput(event, \"space\")\n                            }\n                        />\n                    </Col>\n                    <Col className=\"gutter-row\" span={4}>\n                        {this.state.isRunning ? (\n                            <Button\n                                type=\"primary\"\n                                loading={this.state.buttonLoading}\n                                onClick={() => this.shutdown()}\n                                danger\n                                block\n                            >\n                                停止\n                            </Button>\n                        ) : (\n                            <Button\n                                loading={this.state.buttonLoading}\n                                type=\"primary\"\n                                onClick={() => this.launch()}\n                                block\n                            >\n                                启动\n                            </Button>\n                        )}\n                    </Col>\n                </Row>\n                <Divider />\n                <div>\n                    <span>\n                        客户端总连接数 ：\n                        {this.state.clientList\n                            ? (Number(this.state.clientList.length) * Number(this.state.maxClient)) \n                            : 0}\n                    </span>\n                </div>\n                <Divider />\n                <div className=\"dash-body\">\n                    <Row\n                        gutter={[16, 16]}\n                        justify=\"space-around\"\n                        align=\"middle\"\n                    >\n                        <Col span={10}>\n                            <div>\n                                <Statistic\n                                    title=\"Connecting\"\n                                    value={this.state.connectedNum}\n                                />\n                                <Progress\n                                    strokeColor={{\n                                        \"0%\": \"#87d068\",\n                                        \"100%\": \"#87d068\"\n                                    }}\n                                    trailColor=\"#096dd9\"\n                                    type=\"circle\"\n                                    percent={this.getPercent(\n                                        this.state.connectedNum\n                                    )}\n                                    width={80}\n                                />\n                            </div>\n                        </Col>\n                    </Row>\n                </div>\n                <Divider />\n                <div className=\"dash-log\">\n                    客户端数量 ：\n                    {this.state.clientList ? this.state.clientList.length : 0}\n                    {siteElements}\n                </div>\n            </div>\n        );\n    }\n}\n","const todos = (state = [], action) => {\n    switch (action.type) {\n      case 'ADD_TODO':\n      console.log(state)\n        return [\n          ...state,\n          {\n            id: action.id,\n            text: action.text,\n            completed: false\n          }\n        ]\n      case 'TOGGLE_TODO':\n        return state.map(todo =>\n          (todo.id === action.id) \n            ? {...todo, completed: !todo.completed}\n            : todo\n        )\n      default:\n        return state\n    }\n  }\n  \n  export default todos","import { combineReducers,createStore } from 'redux'\nimport todos from './reduce/todo'\n// import visibilityFilter from './visibilityFilter'\n\nconst reducers = combineReducers({\n  todos,\n//   visibilityFilter\n})\n\nlet store = createStore(reducers)\n\nexport default store","import React from 'react'\nimport ReactDOM from 'react-dom';\n\nimport './assets/css/index.css';\n\nimport * as serviceWorker from './serviceWorker';\nimport Routers from './routers'\n\nimport { Provider } from 'react-redux'\nimport Store from './reducers'\n\nReactDOM.render(<Provider store={Store}>\n    <Routers></Routers>\n</Provider>, document.getElementById('root'));\n// ReactDOM.render(<Router routes={routes} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n// import App from '../App';\nimport Todo from '../pages/todo';\nimport Dash from '../pages/Dash'\n\nexport default () => (\n    <Router>\n        <div>\n            <Route exact path=\"/\" component={Dash} />\n            {/* <Route exact path=\"/\" component={App} /> */}\n            <Route exact path=\"/todo\" component={Todo} />\n        </div>\n    </Router>\n)\n"],"sourceRoot":""}